#include "mbed.h"
#include "rtos.h"
#include "math.h"
#include "ctype.h"
#include <RtosTimer.h>
#include <limits>
//Photointerrupter input pins
#define I1pin D2
#define I2pin D11
#define I3pin D12

//Incremental encoder input pins
#define CHApin   D7
#define CHBpin   D8

//Motor Drive output pins   //Mask in output byte
#define L1Lpin D4           //0x01
#define L1Hpin D5           //0x02
#define L2Lpin D3           //0x04
#define L2Hpin D6           //0x08
#define L3Lpin D9           //0x10
#define L3Hpin D10          //0x20
#define LED1pin A3
//#define LED2pin A4
#define LED3pin A6

//#define analogue_out1 A4

#define kp 70
#define kd 50000
#define k  50
#define k_v  1
#define kp_v 70
#define kd_v 60000
#define PWM_signal_period 0.01f
#define K_Sub_s 0.0015f
#define Kp_Sub_s    1.0f
#define Kd_Sub_s    1000.0f
#define Ki_Sub_s    0.01f

#define n_offset 48
#define char_size 64
//Mapping from sequential drive states to motor phase outputs
/*
State   L1  L2  L3  DT  DT_B    ~DT_B   Angle   SM  I3I2I1
0       H   -   L   12  010010  101101  0-60    5   101
1       -   H   L   18  011000  100111  60-120  4   100
2       L   H   -   09  001001  110110  120-180 6   110
3       L   -   H   21  100001  011110  180-240 2   010
4       -   L   H   24  100100  011011  240-300 3   011
5       H   L   -   06  000110  111001  300-360 1   001
6       -   -   -   0   X       X       X       7   111
7       -   -   -   0   X       X       X       0   000
*/
//Drive state to output table
const int8_t driveTable[] = {0x12,0x18,0x09,0x21,0x24,0x06,0x00,0x00};
// corresponding states (0,1,2,3,4,5,6,7} in order 00 L3 L2 L1.

//Mapping from interrupter inputs to sequential rotor states. 0x00 and 0x07 are not valid
const int8_t stateMap[] = {0x07,0x05,0x03,0x04,0x01,0x00,0x02,0x07};
//const int8_t stateMap[] = {0x07,0x01,0x03,0x02,0x05,0x00,0x04,0x07}; //Alternative if phase order of input or drive is reversed

//const_float motor_angle[] = {};
//need attention
//rotor angle mapping

//Phase lead to make motor spin


//Status LED
DigitalOut led(LED1);

//Photointerrupter inputs
InterruptIn I1(I1pin);
InterruptIn I2(I2pin);
InterruptIn I3(I3pin);
InterruptIn CHA(CHApin);
InterruptIn CHB(CHBpin);    

//Motor Drive outputs
PwmOut  L1L(L1Lpin);
PwmOut  L1H(L1Hpin);
PwmOut  L2L(L2Lpin);
PwmOut  L2H(L2Hpin);
PwmOut  L3L(L3Lpin);
PwmOut  L3H(L3Hpin);
DigitalOut LED1_user(LED1pin);
//DigitalOut LED2_user(LED2pin);
DigitalOut LED3_user(LED3pin);

//AnalogOut analog_out1(analogue_out1);


RawSerial pc(SERIAL_TX, SERIAL_RX);

//-----------------------------------------------input control-------------------------
volatile char command[char_size];
volatile char a[1];
volatile bool sign=0;
volatile uint8_t counter=0;
volatile uint8_t c_counter=0;
volatile char *token;
volatile float r;
volatile float v; 
volatile uint8_t note_counter;
volatile char mode[2];
volatile char mnote[2];
volatile float rotation_number;
volatile float rotation_speed;
volatile int substate;
volatile int current_state;
volatile bool deceleration_flag;
volatile int rotation_direction1;
volatile int rotation_direction2;
struct melody{
    int period;
    int8_t times;
    void null(){
        period=0;
        times=0;
    }
};
melody input_note[16];

//--------------------------------------------------------------------------------

Ticker tone_t;
Timer t;
Thread thread1(osPriorityNormal,1024);
Thread thread2(osPriorityHigh,512);
Thread thread3(osPriorityHigh,1024);

//--------------------------------------------------------------------------------

void input_callback_ex(void) {  
    // Note: you need to actually read from the serial to clear the RX interrupt
    
    for (int i=0;i<char_size;i++)command[i]='\0';
    counter=0;
    tone_t.detach();
    note_counter=0;
    c_counter=0;
    mode[0]='\0';
    mode[1]='\0';
    a[0]=pc.getc();
    rotation_speed = 50;
    rotation_number = FLT_MAX;
    deceleration_flag = false;
    while(a[0] !='\r'){
        pc.printf("%c",a[0]);
        command[counter]=a[0];
        led = 1;
        a[0]=pc.getc();
        led= 0;
        counter++;
        }
        pc.printf(" \n\r");
    if (command[c_counter]=='R'){
        mode[0]='r';
        c_counter++;
        if(command[c_counter]=='-')  {
            sign=1;
            c_counter++;
        }
        else sign=0;
        r=(command[c_counter]-n_offset);
        c_counter++;
        pc.printf("%f \n\r",r);
        while(isdigit(command[c_counter])){
            r=r*10+(command[c_counter]-n_offset);
            pc.printf("%f \n\r",r);
            c_counter++;
        }
        if(command[c_counter]=='.'){
            c_counter++;
            float deci;
            deci=0.1;
            while(isdigit(command[c_counter])){
                r=r+(command[c_counter]-n_offset)*deci;
                deci=deci/10;
                c_counter++;
            }
//            delete deci;
        }
        if(sign) r=-r;
        rotation_number = r*6;
        current_state=0;
    }
    if(command[c_counter]=='V'){
        if(c_counter==0)  mode[0]='v';
        else mode[1]='v';
        c_counter++;
        if(command[c_counter]=='-')  {
            sign=1;
            c_counter++;
        }
        else sign=0;
        v=(command[c_counter]-n_offset);
        c_counter++;
        pc.printf("%f \n\r",v);
        while(isdigit(command[c_counter])){
            v=v*10+(command[c_counter]-n_offset);
            pc.printf("%f \n\r",v);
            c_counter++;
        }
        if(command[c_counter]=='.'){
            c_counter++;
            float deci=0.1;
            while(isdigit(command[c_counter])){
                v=v+(command[c_counter]-n_offset)*deci;
                deci=deci/10;
                c_counter++;
            }
//            delete deci;
        }
        if(sign) r=-r;
        rotation_speed = v*6.0f/1000.0f;
    }
    if(command[c_counter]=='T'){
        mode[0]='t';
        c_counter++;
        for (int i=0;i<16;i++) input_note[i].null();
        while(c_counter<counter){
            mnote[0]=command[c_counter];
            c_counter++;
            if (!isdigit(command[c_counter])) {
                mnote[1]=command[c_counter];
                c_counter++;
            }
            else mnote[1]=' ';
            input_note[note_counter].times=(command[c_counter]-n_offset);
            c_counter++;

            if ((mnote[0]=='C')&&(mnote[1]==' ')) input_note[note_counter].period=61162;
            else if ((mnote[0]=='C')&&(mnote[1]=='#')) input_note[note_counter].period=57737;
            else if ((mnote[0]=='D')&&(mnote[1]=='^')) input_note[note_counter].period=57737;
            else if ((mnote[0]=='D')&&(mnote[1]==' ')) input_note[note_counter].period=54496;
            else if ((mnote[0]=='D')&&(mnote[1]=='#')) input_note[note_counter].period=51414;
            else if ((mnote[0]=='E')&&(mnote[1]=='^')) input_note[note_counter].period=51414;
            else if ((mnote[0]=='E')&&(mnote[1]==' ')) input_note[note_counter].period=48544;
            else if ((mnote[0]=='F')&&(mnote[1]==' ')) input_note[note_counter].period=45809;
            else if ((mnote[0]=='F')&&(mnote[1]=='#')) input_note[note_counter].period=43253;
            else if ((mnote[0]=='G')&&(mnote[1]=='^')) input_note[note_counter].period=43253;
            else if ((mnote[0]=='G')&&(mnote[1]==' ')) input_note[note_counter].period=40816;
            else if ((mnote[0]=='G')&&(mnote[1]=='#')) input_note[note_counter].period=38521;
            else if ((mnote[0]=='A')&&(mnote[1]=='^')) input_note[note_counter].period=38521;
            else if ((mnote[0]=='A')&&(mnote[1]==' ')) input_note[note_counter].period=36364;
            else if ((mnote[0]=='A')&&(mnote[1]=='#')) input_note[note_counter].period=34317;
            else if ((mnote[0]=='B')&&(mnote[1]=='^')) input_note[note_counter].period=34317;
            else if ((mnote[0]=='B')&&(mnote[1]==' ')) input_note[note_counter].period=32394;
            note_counter++;
        }
        
        note_counter=0;
        thread3.signal_set(1);            
    }
    if (mode[0]!='t'){
        L1L.period (PWM_signal_period);
        L1H.period (PWM_signal_period);
        L2L.period (PWM_signal_period);
        L2H.period (PWM_signal_period);
        L3L.period (PWM_signal_period);
        L3H.period (PWM_signal_period);
    }
    if (rotation_number == FLT_MAX){
        if (v>0) {
            rotation_direction1 = -2;
            rotation_direction2 = 0;
        }
        else {
            rotation_direction1 = 0;
            rotation_direction2 = -2; 
        }
    }
    else {
        if (r>0) {
            rotation_direction1 = -2;
            rotation_direction2 = 0;
        }
        else {
            rotation_direction1 = 0;
            rotation_direction2 = -2; 
        }
    }        
}
//--------------------------------------------------end of input irq------------------

//Set a given drive state
void motorOut(int8_t driveState, int8_t duty_cycle){

    //Lookup the output byte from the drive state.
    int8_t driveOut = driveTable[driveState & 0x07];
    float duty_cycle_f,one_minus_duty_cycle_f;
    duty_cycle_f = 0.1f*duty_cycle;
    one_minus_duty_cycle_f = 1- duty_cycle_f;
    //Turn off first
    if (~driveOut & 0x01) L1L.write(0);
    if (~driveOut & 0x02) L1H.write(1);
    if (~driveOut & 0x04) L2L.write(0);
    if (~driveOut & 0x08) L2H.write(1);
    if (~driveOut & 0x10) L3L.write(0);
    if (~driveOut & 0x20) L3H.write(1);

    //Then turn on
    if (driveOut & 0x01) L1L.write(duty_cycle_f);
    if (driveOut & 0x02) L1H.write(one_minus_duty_cycle_f);
    if (driveOut & 0x04) L2L.write(duty_cycle_f);
    if (driveOut & 0x08) L2H.write(one_minus_duty_cycle_f);
    if (driveOut & 0x10) L3L.write(duty_cycle_f);
    if (driveOut & 0x20) L3H.write(one_minus_duty_cycle_f);
    }

    //Convert photointerrupter inputs to a rotor state


inline int8_t readRotorState(){
    return stateMap[I1 + 2*I2 + 4*I3];
    }

inline void ticker_isr(){
    thread3.signal_set(1);
}

//----------------------------Timer t---------------------------------------


//--------------------------------------------------------------------------------
// thread


void call_thread(void const *n){
//    substate++;
//    thread1.signal_set(4);
}

void call_thread2(void const *n){
    thread1.signal_set(4);
    LED3_user=!LED3_user;
}


void call_change_state(){
    thread2.signal_set(1);
//    led = !led;
    }

void change_state_thread(int* pass_to_state[]){
    int intState,intStateOld;
    while (true){
        Thread::signal_wait(1);
        intState = (int)readRotorState();
        if ((intState == 0)&&(intStateOld==5)) current_state = current_state+1;
        else if ((intState == 5)&&(intStateOld==0)) current_state = current_state-1;
        else if (intState > intStateOld)     current_state = current_state+1;
        else if (intState < intStateOld)    current_state = current_state-1;
        if(intStateOld != intState) {
            substate = current_state*39;
            intStateOld = intState;
        }
        *pass_to_state[0] = intState;
//        pc.printf( "    %i\n\r", current_state);
    }
}


void pwm_control_thread(int *pass_to_thread1[3]) {
    int sub_t_difference;
    int current_sub_t,previous_current_sub_t;
    int lead;
    int error_sub_s;
    float pwm_control,current_sub_v;
    float Integrated_error_sub_s;
    int CHA_old;
    
    Integrated_error_sub_s=0;
    while(true){
        Thread::signal_wait(4);
            error_sub_s =  *pass_to_thread1[1] - substate;
            if (abs(error_sub_s) <30) wait(1);
            current_sub_t = t.read_ms();
            sub_t_difference = current_sub_t - previous_current_sub_t;
            current_sub_v = 1.0f/sub_t_difference;
//            error_sub_v = sub_v_ref - current_sub_v;
            Integrated_error_sub_s = sub_t_difference * error_sub_s;
            pwm_control=K_Sub_s*(Kp_Sub_s * error_sub_s - Kd_Sub_s * current_sub_v + Ki_Sub_s * Integrated_error_sub_s);
//            pwm_v_control = Kp_Sub_v * error_sub_v;
            if (pwm_control>0) lead = rotation_direction1;
            else {
                lead = rotation_direction2;
                pwm_control = -pwm_control;
            }
            motorOut((*pass_to_thread1[2]+lead+6)%6,(int)pwm_control);
//            pc.printf("  %f\n\r",pwm_control);
            if (CHA_old != CHA) previous_current_sub_t = current_sub_t;
            CHA_old=CHA;
//            LED1_user = !LED1_user;
//            analog_out1.write_u16(pwm_control*6553);
    }
}

void tone_set(){
    while (true){
        Thread::signal_wait(1);
        note_counter++;
        if ((input_note[note_counter].period==0)&&(input_note[note_counter].times==0)|| (note_counter>=16)) note_counter=0;
        L1L.period_us (input_note[note_counter].period);
        L1H.period_us (input_note[note_counter].period);
        L2L.period_us (input_note[note_counter].period);
        L2H.period_us (input_note[note_counter].period);
        L3L.period_us (input_note[note_counter].period);
        L3H.period_us (input_note[note_counter].period);
        tone_t.attach(&ticker_isr,input_note[note_counter].times);
        pc.printf("     %d\n\r",note_counter);
    }
}   
//----------------------------------------------------------------------------------


//Main
int main() {
    RtosTimer pwm_control_timer(callback(call_thread2,(void *)0));
    LED1_user = 1;
    pc.printf("i");
    pwm_control_timer.start(1000);
    pc.attach(&input_callback_ex);
    thread3.start(callback(tone_set));
    int lead;
    //Initialise the serial port
    int* pass_to_state[2];
    int intState = 0;
    pc.printf("Hello\n\r");
    //initialisation
    motorOut(0,10);
    wait(3);
    motorOut(2,10);
    int8_t orState =readRotorState();
    pc.printf("Rotor origin: %x\n\r",orState);
    float error_s;
    float control_v;
    int current_state_Old,previous_t,current_t;
    error_s = 0;
    current_t = 0;
    previous_t= 0;
    lead=rotation_direction1;
    int* pass_to_thread1[3];
    thread2.terminate();
    thread2.start(callback(change_state_thread,pass_to_state));
//    thread1.start(callback(pwm_control_thread,pass_to_thread1));
    
    //start thread

    thread1.terminate();
    t.start();
    //Poll the rotor state and set the motor outputs accordingly to spin the motor
    pc.printf("before while\n\r");
    float control_signal,s_differential;
    float error_v,v_differential,previous_error_v,previous_error_s;
    int sub_rotation_number;
    //[0] current_state,int; [1]sub_rotation_number; [2]lead; [3]intState;
    sub_rotation_number = 39 * rotation_number;
    L1L.period (PWM_signal_period);
    L1H.period (PWM_signal_period);
    L2L.period (PWM_signal_period);
    L2H.period (PWM_signal_period);
    L3L.period (PWM_signal_period);
    L3H.period (PWM_signal_period);

//    LED1_user=0;
    v_differential=0;
//    CHA.rise( callback(call_thread,(void *)0));
//    CHA.fall(callback(call_thread,(void *)0));
    pass_to_state[0] = &intState;
    pass_to_thread1[1]= &sub_rotation_number;
    pass_to_thread1[2]= &intState;
    I1.rise(&call_change_state);
    I1.fall(&call_change_state);
    I2.rise(&call_change_state);
    I2.fall(&call_change_state);
    I3.rise(&call_change_state);
    I3.fall(&call_change_state);
    motorOut(2,10);
    while (true) {
        if (current_state != current_state_Old) {
            sub_rotation_number = 39 * rotation_number;
            current_t = t.read_ms();
            error_s = rotation_number-current_state;
            s_differential = (error_s-previous_error_s)/(current_t-previous_t);
            error_v = rotation_speed-s_differential;
//            v_differential = (error_v-previous_error_v)/(current_t-previous_t);
            control_signal = k*(kp * abs(error_s) - kd * s_differential);
            control_v = k_v*(kp_v * (error_v) + kd_v * v_differential);
            pc.printf("%e  %e    %e  %e   %f    %i\n\r",error_s,previous_error_s,rotation_speed, control_v,s_differential,lead);
            previous_t = current_t;
            previous_error_s=error_s;
            previous_error_v = error_v;
            if((control_signal>0)&&(deceleration_flag == false)){
                if (control_v>0){
                    lead = rotation_direction1;
                    motorOut((intState+lead+6)%6,10); //+6 to make sure the remainder is positive
                    thread1.terminate();
                }
                else {
                    lead = rotation_direction2;
                    motorOut((intState+lead+6)%6,10);
                }
            }
            else {            
//                thread1.start(callback(pwm_control_thread,pass_to_thread1));
//                deceleration_flag = true;
                lead=rotation_direction2;
            }    
//            analog_out1.write_u16(read_v*167);
            current_state_Old = current_state;

        }

    }
}
